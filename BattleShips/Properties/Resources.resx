<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="commandsRejectedErrorMessage" xml:space="preserve">
    <value>Too many incorrect placement commands were made. The ship was removed from your fleet.</value>
  </data>
  <data name="fireErrorMessage" xml:space="preserve">
    <value>The command was not recognised. Ensure that the format is correct eg. 4,5  or  5,2  Enter coordinates to fire your missile...</value>
  </data>
  <data name="gameEndMessage" xml:space="preserve">
    <value>*** This game has ended ***
      Press any key to exit...</value>
  </data>
  <data name="gameStart" xml:space="preserve">
    <value>Game starting....</value>
  </data>
  <data name="getFireCommand" xml:space="preserve">
    <value>{0} enter the coordinates to fire at....</value>
  </data>
  <data name="getGameMode" xml:space="preserve">
    <value>Game mode choices.....

0 - Default game : every player has just one scout and one destroyer ship.
1 - Custom game : choose the the ship types and the quantities needed.

Enter 0 or 1:</value>
  </data>
  <data name="getModeErrorMessage" xml:space="preserve">
    <value>The mode you entered was not recognised. Try again using a valid number for your game mode.</value>
  </data>
  <data name="getNameErrorMessage" xml:space="preserve">
    <value>Enter a valid name. Name must not be white space or null. Try again.</value>
  </data>
  <data name="getNumberOfPlayers" xml:space="preserve">
    <value>Enter the number of players for this game (must be two or more):</value>
  </data>
  <data name="getPlaceErrorMessage" xml:space="preserve">
    <value>The command was not recognised. Ensure that the format is correct eg. 4,5,v  or  5,2,h  Enter the coordinates and direction for the ship.</value>
  </data>
  <data name="getPlacementCommand" xml:space="preserve">
    <value>{0}...
Enter the coordinates and orientation for your ship e.g. 3,4,h or 7,2,v  Hint: All ship positions must lie in the bounds of the sea, and cannot overlap your other ships. Enter the command to place your ship....</value>
  </data>
  <data name="getPlayerName" xml:space="preserve">
    <value>Enter your name. You must submit any value except spaces or null...:</value>
  </data>
  <data name="getPlayerNoErrorMessage" xml:space="preserve">
    <value>Enter a valid number.Two or more players are required for this game.</value>
  </data>
  <data name="getSeaErrorMessage" xml:space="preserve">
    <value>The sea dimensions given were not valid. Ensure that the format is correct and that the minimum size is 5,5. Enter the sea dimensions.</value>
  </data>
  <data name="getSeaSize" xml:space="preserve">
    <value>Sea setup...

Note: the sea grid size typed here must be &gt; or = 5 x 5 : Enter the size of the sea, use a comma to separate the x and y dimensions eg. 6,7  Enter the sea size.....</value>
  </data>
  <data name="getShipNoErrorMessage" xml:space="preserve">
    <value>The number you entered was not recognised. If ships of this kind are not required then type 0</value>
  </data>
  <data name="getShipTypeNo" xml:space="preserve">
    <value>Please enter the number of {0}s needed:</value>
  </data>
  <data name="hitMessage" xml:space="preserve">
    <value>Position Hit!!</value>
  </data>
  <data name="leaveMessage" xml:space="preserve">
    <value>{0} has no ships remaining and has left the game!!</value>
  </data>
  <data name="missMessage" xml:space="preserve">
    <value>Miss!!</value>
  </data>
  <data name="modeSetConfirmation" xml:space="preserve">
    <value>...the game mode has been set to {0}.</value>
  </data>
  <data name="placementErrorMessage" xml:space="preserve">
    <value>Ship not added because at least one position is already occupied or lies outside the sea boundary. Enter the command to place your ship...</value>
  </data>
  <data name="playerNameSetConfirmation" xml:space="preserve">
    <value>...your name has been set.</value>
  </data>
  <data name="playerNoSetConfirmation" xml:space="preserve">
    <value>...this game has {0} players.</value>
  </data>
  <data name="playerSetupIntro" xml:space="preserve">
    <value>New player setup....</value>
  </data>
  <data name="playerSuffix" xml:space="preserve">
    <value>Player</value>
  </data>
  <data name="seaSetConfirmation" xml:space="preserve">
    <value>...the sea has been set to {0},{1}</value>
  </data>
  <data name="shipNoSetConfirmation" xml:space="preserve">
    <value>...{0} ships were chosen.</value>
  </data>
  <data name="shipPositionsSetConfirmation" xml:space="preserve">
    <value>...your ship position has been set.</value>
  </data>
  <data name="shipTypeDetails" xml:space="preserve">
    <value>Ship to add: {0}, size {1}....</value>
  </data>
  <data name="sinkMessage" xml:space="preserve">
    <value>Position hit and {0} sunk!!</value>
  </data>
  <data name="winMessage" xml:space="preserve">
    <value>***** W I N N E R *****
   Congratulations {0}
    You are the winner.</value>
  </data>
</root>